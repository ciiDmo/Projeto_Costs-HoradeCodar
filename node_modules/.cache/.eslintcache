[{"C:\\git-repos\\Projeto_Costs-HoradeCodar\\src\\index.js":"1","C:\\git-repos\\Projeto_Costs-HoradeCodar\\src\\App.js":"2","C:\\git-repos\\Projeto_Costs-HoradeCodar\\src\\components\\pages\\Company.js":"3","C:\\git-repos\\Projeto_Costs-HoradeCodar\\src\\components\\pages\\Home.js":"4","C:\\git-repos\\Projeto_Costs-HoradeCodar\\src\\components\\pages\\Contact.js":"5","C:\\git-repos\\Projeto_Costs-HoradeCodar\\src\\components\\pages\\NewProject.js":"6","C:\\git-repos\\Projeto_Costs-HoradeCodar\\src\\components\\pages\\Projects.js":"7","C:\\git-repos\\Projeto_Costs-HoradeCodar\\src\\components\\layout\\Container.js":"8","C:\\git-repos\\Projeto_Costs-HoradeCodar\\src\\components\\pages\\Project.js":"9","C:\\git-repos\\Projeto_Costs-HoradeCodar\\src\\components\\layout\\Navbar.js":"10","C:\\git-repos\\Projeto_Costs-HoradeCodar\\src\\components\\layout\\Footer.js":"11","C:\\git-repos\\Projeto_Costs-HoradeCodar\\src\\components\\layout\\LinkButton.js":"12","C:\\git-repos\\Projeto_Costs-HoradeCodar\\src\\components\\layout\\Loading.js":"13","C:\\git-repos\\Projeto_Costs-HoradeCodar\\src\\components\\layout\\Message.js":"14","C:\\git-repos\\Projeto_Costs-HoradeCodar\\src\\components\\project\\ProjectForm.js":"15","C:\\git-repos\\Projeto_Costs-HoradeCodar\\src\\components\\project\\ProjectCard.js":"16","C:\\git-repos\\Projeto_Costs-HoradeCodar\\src\\components\\service\\ServiceCard.js":"17","C:\\git-repos\\Projeto_Costs-HoradeCodar\\src\\components\\service\\ServiceForm.js":"18","C:\\git-repos\\Projeto_Costs-HoradeCodar\\src\\components\\form\\Select.js":"19","C:\\git-repos\\Projeto_Costs-HoradeCodar\\src\\components\\form\\Input.js":"20","C:\\git-repos\\Projeto_Costs-HoradeCodar\\src\\components\\form\\Submit.js":"21"},{"size":219,"mtime":1643112833265,"results":"22","hashOfConfig":"23"},{"size":1154,"mtime":1643316767344,"results":"24","hashOfConfig":"23"},{"size":125,"mtime":1643114421191,"results":"25","hashOfConfig":"23"},{"size":560,"mtime":1643212197656,"results":"26","hashOfConfig":"23"},{"size":125,"mtime":1643114460452,"results":"27","hashOfConfig":"23"},{"size":1199,"mtime":1643212197656,"results":"28","hashOfConfig":"23"},{"size":2921,"mtime":1643316767349,"results":"29","hashOfConfig":"23"},{"size":208,"mtime":1643116681316,"results":"30","hashOfConfig":"23"},{"size":8580,"mtime":1643316767346,"results":"31","hashOfConfig":"23"},{"size":1088,"mtime":1643135351330,"results":"32","hashOfConfig":"23"},{"size":668,"mtime":1643212197652,"results":"33","hashOfConfig":"23"},{"size":259,"mtime":1643144174628,"results":"34","hashOfConfig":"23"},{"size":371,"mtime":1643229728370,"results":"35","hashOfConfig":"23"},{"size":706,"mtime":1643212197654,"results":"36","hashOfConfig":"23"},{"size":2212,"mtime":1643151321988,"results":"37","hashOfConfig":"23"},{"size":1011,"mtime":1643316767350,"results":"38","hashOfConfig":"23"},{"size":771,"mtime":1643316767351,"results":"39","hashOfConfig":"23"},{"size":1435,"mtime":1643316767351,"results":"40","hashOfConfig":"23"},{"size":638,"mtime":1643151321986,"results":"41","hashOfConfig":"23"},{"size":520,"mtime":1643144288463,"results":"42","hashOfConfig":"23"},{"size":209,"mtime":1643144288467,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"enbima",{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62"},{"filePath":"63","messages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\git-repos\\Projeto_Costs-HoradeCodar\\src\\index.js",[],"C:\\git-repos\\Projeto_Costs-HoradeCodar\\src\\App.js",[],"C:\\git-repos\\Projeto_Costs-HoradeCodar\\src\\components\\pages\\Company.js",[],"C:\\git-repos\\Projeto_Costs-HoradeCodar\\src\\components\\pages\\Home.js",[],"C:\\git-repos\\Projeto_Costs-HoradeCodar\\src\\components\\pages\\Contact.js",[],"C:\\git-repos\\Projeto_Costs-HoradeCodar\\src\\components\\pages\\NewProject.js",[],"C:\\git-repos\\Projeto_Costs-HoradeCodar\\src\\components\\pages\\Projects.js",[],"C:\\git-repos\\Projeto_Costs-HoradeCodar\\src\\components\\layout\\Container.js",[],"C:\\git-repos\\Projeto_Costs-HoradeCodar\\src\\components\\pages\\Project.js",["87"],"import {parse, v4 as uuidv4} from 'uuid'\r\n\r\nimport styles from './Project.module.css'\r\n\r\nimport {useParams} from 'react-router-dom'\r\nimport {useState, useEffect} from 'react'\r\n\r\nimport Loading from '../layout/Loading'\r\nimport Container from '../layout/Container'\r\nimport ProjectForm from '../project/ProjectForm'\r\nimport Message from '../layout/Message'\r\nimport ServiceForm from '../service/ServiceForm'\r\nimport ServiceCard from '../service/ServiceCard'\r\n\r\nfunction Project() {\r\n\r\n    const { id} = useParams()\r\n\r\n    const [project, setProject] = useState([])\r\n    const [services, setServices] = useState([])\r\n    const [showProjectForm, setShowProjectForm] = useState(false)    \r\n    const [showServiceForm, setShowServiceForm] = useState(false)\r\n    const [message, setMessage] = useState()\r\n    const [type, setType] = useState()\r\n\r\n    useEffect(() => {\r\n        setTimeout(() => {\r\n            fetch(`http://localhost:5000/projects/${id}`, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            })\r\n            .then((resp) => resp.json())\r\n            .then((data) => {\r\n            setProject(data)\r\n            setServices(data.services)\r\n            })\r\n            .catch((err) => console.log)\r\n        }, 1000)\r\n    }, [id])\r\n\r\n    function editPost(project) {\r\n        setMessage('')\r\n\r\n        //budget validatiion\r\n        if(project.budget < project.costs) {\r\n            setMessage('O orçamento não pode ser menor que o custo do projeto!')\r\n            setType('error')\r\n            return false\r\n        }\r\n\r\n        fetch (`http://localhost:5000/projects/${project.id}`, {\r\n            method: 'PATCH',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify(project),\r\n            })\r\n            .then((resp) => resp.json())\r\n            .then((data) => {\r\n            setProject(data)\r\n            setShowProjectForm(false)\r\n            setMessage('Projeto atualizado!')\r\n            setType('success')\r\n            })\r\n            .catch((err) => console.log)\r\n    }\r\n\r\n    function createService(project) {        \r\n        setMessage('')\r\n\r\n        //last service\r\n        const lastService = project.services[project.services.length -1]\r\n\r\n        lastService.id = uuidv4()\r\n        \r\n        const lastServiceCosts = lastService.costs\r\n\r\n        const newCosts = parseFloat(project.costs) + parseFloat(lastServiceCosts)\r\n\r\n        // maximum valuue validation\r\n\r\n        if(newCosts > parseFloat(project.budget)) {\r\n            setMessage('Orçamento ultrapassado! Verifique o valor do serviço.')\r\n            setType('error')\r\n            project.services.pop()\r\n            return false\r\n        }\r\n\r\n        // add service cost to total project cost\r\n        project.costs = newCosts\r\n\r\n        // update project\r\n        fetch (`http://localhost:5000/projects/${project.id}`, {\r\n            method: 'PATCH',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(project)\r\n        })\r\n        .then((resp) => resp.json())\r\n        .then((data) => {\r\n            setShowServiceForm(false)\r\n        })\r\n        .catch((err) => console.log)\r\n    }\r\n\r\n\r\n    function removeService(id, costs) {\r\n        setMessage('')\r\n        \r\n        const servicesUpdated = project.services.filter(\r\n            (service) => service.id !== id\r\n        )\r\n\r\n        const projectUpdated = project\r\n\r\n        projectUpdated.services = servicesUpdated\r\n        projectUpdated.costs = parseFloat(projectUpdated.costs) - parseFloat(costs)\r\n        \r\n        fetch (`http://localhost:5000/projects/${projectUpdated.id}`, {\r\n            method: 'PATCH',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(projectUpdated)\r\n        })\r\n        .then((resp) => resp.json())\r\n        .then((data) => {\r\n            setProject(projectUpdated)\r\n            setServices(servicesUpdated)\r\n            setMessage('Serviço removido com sucesso!')\r\n            setType('success')\r\n        })\r\n        .catch((err) => console.log)\r\n\r\n    }\r\n\r\n\r\n\r\n    function toggleProjectForm() {\r\n        setShowProjectForm(!showProjectForm)\r\n    }\r\n\r\n\r\n    function toggleServiceForm() {\r\n        setShowServiceForm(!showServiceForm)\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            {project.name ? (\r\n                <div className={styles.project_details}>\r\n                    <Container customClass=\"column\">\r\n                        {message && <Message type={type} msg={message} /> }\r\n                        <div className={styles.details_container}>\r\n                            <h1>Projeto: {project.name}</h1>\r\n                            <button className={styles.btn} onClick={toggleProjectForm}>\r\n                                {!showProjectForm ? 'Editar Projeto' : 'Fechar'}\r\n                            </button>\r\n                            {!showProjectForm ? (\r\n                                <div className={styles.project_info}>\r\n                                    <p>\r\n                                        <span>\r\n                                            Categoria:\r\n                                        </span> \r\n                                        {project.category.name}\r\n                                    </p>\r\n                                    <p>\r\n                                        <span>\r\n                                            Total de Orçamento:\r\n                                        </span> \r\n                                        R${project.budget}\r\n                                    </p>\r\n                                    <p>\r\n                                        <span>\r\n                                            Total Utilizado:\r\n                                        </span> \r\n                                        R${project.costs}\r\n                                    </p>\r\n                                </div>\r\n                            ) : (\r\n                                <div className={styles.project_info}>\r\n                                    <ProjectForm \r\n                                        handleSubmit={editPost} \r\n                                        btnText=\"Concluir Edição\" \r\n                                        projectData={project} \r\n                                    />\r\n                                </div>\r\n                            )}\r\n                        </div>\r\n                        <div className={styles.service_form_container}>\r\n                            <h2>Adicione um serviço:</h2>\r\n                            <button className={styles.btn} onClick={toggleServiceForm}>\r\n                                {!showServiceForm ? 'Adicionar serviço' : 'Fechar'}\r\n                            </button>\r\n                            <div className={styles.project_info}>\r\n                                {showServiceForm && (\r\n                                    <ServiceForm \r\n                                        handleSubmit={createService}\r\n                                        btnText='Adicionar Serviço'\r\n                                        projectData={project}\r\n                                    />\r\n                                )}\r\n                            </div>\r\n                        </div>\r\n                        <h2>Serviços</h2>\r\n                        <Container customClass='start'>\r\n                            {services.length > 0 &&\r\n                                services.map((service) => (\r\n                                    <ServiceCard \r\n                                        id={service.id}\r\n                                        name={service.name}\r\n                                        costs={service.costs}\r\n                                        description={service.description}\r\n                                        key={service.key}\r\n                                        handleRemove={removeService}\r\n                                    />\r\n                                ))\r\n                            }\r\n                            {services.length === 0 &&\r\n                                <p>Não há serviços cadastrados.</p>\r\n                            }\r\n                        </Container>\r\n                    </Container>\r\n                </div>\r\n            ): (\r\n                <Loading />\r\n            )}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Project","C:\\git-repos\\Projeto_Costs-HoradeCodar\\src\\components\\layout\\Navbar.js",[],"C:\\git-repos\\Projeto_Costs-HoradeCodar\\src\\components\\layout\\Footer.js",[],"C:\\git-repos\\Projeto_Costs-HoradeCodar\\src\\components\\layout\\LinkButton.js",[],"C:\\git-repos\\Projeto_Costs-HoradeCodar\\src\\components\\layout\\Loading.js",[],"C:\\git-repos\\Projeto_Costs-HoradeCodar\\src\\components\\layout\\Message.js",[],"C:\\git-repos\\Projeto_Costs-HoradeCodar\\src\\components\\project\\ProjectForm.js",[],"C:\\git-repos\\Projeto_Costs-HoradeCodar\\src\\components\\project\\ProjectCard.js",[],"C:\\git-repos\\Projeto_Costs-HoradeCodar\\src\\components\\service\\ServiceCard.js",[],"C:\\git-repos\\Projeto_Costs-HoradeCodar\\src\\components\\service\\ServiceForm.js",[],"C:\\git-repos\\Projeto_Costs-HoradeCodar\\src\\components\\form\\Select.js",[],"C:\\git-repos\\Projeto_Costs-HoradeCodar\\src\\components\\form\\Input.js",[],"C:\\git-repos\\Projeto_Costs-HoradeCodar\\src\\components\\form\\Submit.js",[],{"ruleId":"88","severity":1,"message":"89","line":1,"column":9,"nodeType":"90","messageId":"91","endLine":1,"endColumn":14},"no-unused-vars","'parse' is defined but never used.","Identifier","unusedVar"]